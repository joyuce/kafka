# 生效相应的配置文件
spring.profiles.active                                 = pro
spring.jackson.serialization.write-dates-as-timestamps = true

#============== kafka ===================
# 指定kafka server的地址，集群配多个，中间，逗号隔开
spring.kafka.bootstrap-servers                         = 127.0.0.1:9092

#=============== provider  =======================
# 写入失败时，重试次数。当leader节点失效，一个repli节点会替代成为leader节点，此时可能出现写入失败，
# 当retris为0时，produce不会重复。retirs重发，此时repli节点完全成为leader节点，不会产生消息丢失。
spring.kafka.producer.retries                          = 0

#一次调用poll()操作时返回的最大记录数，默认值为500
spring.kafka.consumer.max-poll-records                 = 5

spring.kafka.consumer.group-id                         = test
#procedure要求leader在考虑完成请求之前收到的确认数，用于控制发送记录在服务端的持久化，其值可以为如下：
#acks = 0 如果设置为零，则生产者将不会等待来自服务器的任何确认，该记录将立即添加到套接字缓冲区并视为已发送。在这种情况下，无法保证服务器已收到记录，并且重试配置将不会生效（因为客户端通常不会知道任何故障），为每条记录返回的偏移量始终设置为-1。
#acks = 1 这意味着leader会将记录写入其本地日志，但无需等待所有副本服务器的完全确认即可做出回应，在这种情况下，如果leader在确认记录后立即失败，但在将数据复制到所有的副本服务器之前，则记录将会丢失。
#acks = all 这意味着leader将等待完整的同步副本集以确认记录，这保证了只要至少一个同步副本服务器仍然存活，记录就不会丢失，这是最强有力的保证，这相当于acks = -1的设置。
#可以设置的值为：all, -1, 0, 1
spring.kafka.producer.acks                             = 1

# 指定消息key和消息体的编解码方式
spring.kafka.producer.key-serializer                   = org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer                 = org.apache.kafka.common.serialization.StringSerializer
spring.kafka.consumer.key-deserializer                 = org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer               = org.apache.kafka.common.serialization.StringDeserializer